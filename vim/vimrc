call plug#begin('~/.vim/plugged')
Plug 'junegunn/vim-peekaboo' " Preview registers before pasting
Plug 'dracula/vim'

" Tpope fanboy section
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
call plug#end()
set nocompatible
syntax on
filetype plugin indent on
set history=10000
set autoread
set scrolloff=10
set hid
set backspace=eol,start,indent
set smartcase
set nohlsearch
set incsearch
set magic
set encoding=utf8
set ffs=unix,dos,mac
set autoindent
set smartindent
set nowrap
set showbreak=->
set sidescroll=1
set sidescrolloff=80
set smarttab
set relativenumber
set number
set linebreak
set shiftround
set textwidth=80
set formatoptions=qrn1
set background=dark
set modeline
set modelines=5
set mouse=
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif
set t_ut=
set nobackup
set nowb
set noswapfile
set expandtab
set shiftwidth=2
set tabstop=2
set path=.,,
set spelllang=nl,en
set wildmenu
set wildmode=full,list
set hidden
set updatetime=300
set list
set listchars=tab:->,trail:~,extends:>,precedes:<,nbsp:.
set pumheight=10
set noshowmode
set splitbelow
set splitright
set cursorline
set foldenable
set foldlevelstart=99
set foldmethod=expr
set conceallevel=3
set omnifunc=syntaxcomplete#Complete
colorscheme dracula

" Return to last edit position when opening files
autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

augroup executable
  autocmd!
  autocmd BufReadPost *
  \ if getline(1) =~ '^#!\s*\S' |
  \   silent! exe "!chmod +x \"%:p\"" |
  \ endif
  autocmd InsertLeave * nested
  \ if getline(1) =~ '^#!\s*\S' |
  \   silent! exe "!chmod +x \"%:p\"" |
  \ endif
augroup END

nnoremap <leader>ve :e ~/.vimrc<cr>
nnoremap <leader>vs :source ~/.vimrm<cr>
nnoremap <leader>vm :map<cr>

nnoremap <leader>r :!clear;%:p<cr>

" also  make gf  work with non-existsing files
nnoremap gf :e <cfile><CR>

" Make c-c behave exactly like esc
inoremap <c-c> <esc>

" H/L for really fast end and home
nnoremap H ^
nnoremap L $
vnoremap H ^
vnoremap L $
onoremap H ^
onoremap L $

" Indentation
vnoremap < <gv
vnoremap > >gv

" Move lines
nnoremap <a-k> :move-2<cr>
nnoremap <a-j> :move+<cr>
vnoremap <a-k> :move-2<cr>gv
vnoremap <a-j> :move'>+<cr>gv

" Toggle common options
nnoremap <leader>th :set hlsearch!<cr>:set hlsearch?<cr>
nnoremap <leader>tp :set paste!<cr>
nnoremap <leader>tw :set wrap!<cr>:set wrap?<cr>
nnoremap <leader>ts :set spell!<cr>:set spell?<cr>

" Close temp screens with q
au FileType help nnoremap q :q!<cr>
au FileType qf nnoremap q :q!<cr>

" Buffer navigation
nnoremap <c-l> :bn<cr>
nnoremap <c-h> :bp<cr>

" zz everything
nnoremap n nzz
nnoremap N Nzz
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz
nnoremap * *zz
nnoremap # #zz

" Abbreviations
iabbrev name/ Abe van der Wielen
iabbrev email/ abevanderwielen@gmail.com
iabbrev <expr> date/ strftime("%F")
iabbrev <expr> file/ expand('%')
iabbrev github/ https://github.com/the-abe
iabbrev bash/ #!/bin/bash
iabbrev ruby/ #!/usr/bin/env ruby
iabbrev path/ PATH=/usr/local/bin:/usr/bin:/bin

nnoremap <tab> %
nnoremap <c-n> <c-i>

nnoremap <space> :call search('[^a-zA-Z0-9 	_]')<cr>
nnoremap <c-space> :call search('[^a-zA-Z0-9 	_]', 'b')<cr>

nnoremap <leader><space> :s/\v([^^])\s+/\1 /g<cr>
nnoremap <leader>' :s/"/'/g<cr>

nnoremap <cr> viw
xnoremap <expr> <cr> mode() ==# 'V' ? '<esc>{jV}k$' : 'V$'

" Open quickfix when quickfix is populated.
augroup quickfix
  autocmd QuickFixCmdPost [^l]* nested copen
  autocmd QuickFixCmdPost l* nested lopen
augroup END

" Return to last edit position when opening files
autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

autocmd BufWritePost *
  \ if getline(1) =~ '^#!\s*\S' |
  \   silent! exe "!chmod +x \"%:p\"" |
  \ endif

let g:netrw_keepdir = 0
let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'
let g:netrw_localcopydircmd = 'cp -r'
let g:netrw_liststyle = 3
let g:netrw_localmkdiropt = "-p"
let g:netrw_sizestyle = "H"
let g:netrw_winsize = 15
let g:netrw_banner=0
hi! link netrwMarkFile Visual
nnoremap <silent> <leader>p :Lex<CR>

function! NetrwMapping()
  nmap <buffer> H -
  nmap <buffer> l <CR>
  nmap <buffer> L gn
  nmap <buffer> . gh
endfunction

augroup netrw_mapping
  autocmd!
  autocmd filetype netrw call NetrwMapping()
augroup END

